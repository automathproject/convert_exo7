"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableOptions = void 0;
const utils_1 = require("../../../../shared/utils");
/**
 * Class to represent table options as parsed from SQL.
 */
class TableOptions {
    /**
     * Creates table options from a JSON def.
     *
     * @param json JSON format parsed from SQL.
     */
    static fromDef(json) {
        if (json.id === 'P_CREATE_TABLE_OPTIONS') {
            return TableOptions.fromArray(json.def);
        }
        throw new TypeError(`Unknown json id to build table options from: ${json.id}`);
    }
    /**
     * Creates table options instance from an array of options.
     *
     * @param options JSON format parsed from SQL.
     */
    static fromArray(options) {
        const tableOptions = new TableOptions();
        options.forEach((option) => {
            if (utils_1.isDefined(option.def.autoincrement)) {
                tableOptions.autoincrement = option.def.autoincrement;
            }
            if (utils_1.isDefined(option.def.avgRowLength)) {
                tableOptions.avgRowLength = option.def.avgRowLength;
            }
            if (utils_1.isDefined(option.def.charset)) {
                tableOptions.charset = option.def.charset.toLowerCase();
            }
            if (utils_1.isDefined(option.def.checksum)) {
                tableOptions.checksum = option.def.checksum;
            }
            if (utils_1.isDefined(option.def.collation)) {
                tableOptions.collation = option.def.collation.toLowerCase();
            }
            if (utils_1.isDefined(option.def.comment)) {
                tableOptions.comment = option.def.comment;
            }
            if (utils_1.isDefined(option.def.compression)) {
                tableOptions.compression = option.def.compression.toLowerCase();
            }
            if (utils_1.isDefined(option.def.connection)) {
                tableOptions.connection = option.def.connection;
            }
            if (utils_1.isDefined(option.def.dataDirectory)) {
                tableOptions.dataDirectory = option.def.dataDirectory;
            }
            if (utils_1.isDefined(option.def.indexDirectory)) {
                tableOptions.indexDirectory = option.def.indexDirectory;
            }
            if (utils_1.isDefined(option.def.delayKeyWrite)) {
                tableOptions.delayKeyWrite = option.def.delayKeyWrite;
            }
            if (utils_1.isDefined(option.def.encryption)) {
                tableOptions.encryption = option.def.encryption.toLowerCase();
            }
            if (utils_1.isDefined(option.def.encryptionKeyId)) {
                tableOptions.encryptionKeyId = option.def.encryptionKeyId;
            }
            if (utils_1.isDefined(option.def.ietfQuotes)) {
                tableOptions.ietfQuotes = option.def.ietfQuotes.toLowerCase();
            }
            if (utils_1.isDefined(option.def.engine)) {
                tableOptions.engine = option.def.engine;
            }
            if (utils_1.isDefined(option.def.insertMethod)) {
                tableOptions.insertMethod = option.def.insertMethod.toLowerCase();
            }
            if (utils_1.isDefined(option.def.keyBlockSize)) {
                tableOptions.keyBlockSize = option.def.keyBlockSize;
            }
            if (utils_1.isDefined(option.def.maxRows)) {
                tableOptions.maxRows = option.def.maxRows;
            }
            if (utils_1.isDefined(option.def.minRows)) {
                tableOptions.minRows = option.def.minRows;
            }
            if (utils_1.isDefined(option.def.packKeys)) {
                if (utils_1.isString(option.def.packKeys)) {
                    tableOptions.packKeys = option.def.packKeys.toLowerCase();
                }
                else {
                    tableOptions.packKeys = option.def.packKeys;
                }
            }
            if (utils_1.isDefined(option.def.pageChecksum)) {
                tableOptions.pageChecksum = option.def.pageChecksum;
            }
            if (utils_1.isDefined(option.def.password)) {
                tableOptions.password = option.def.password;
            }
            if (utils_1.isDefined(option.def.rowFormat)) {
                tableOptions.rowFormat = option.def.rowFormat.toLowerCase();
            }
            if (utils_1.isDefined(option.def.statsAutoRecalc)) {
                if (utils_1.isString(option.def.statsAutoRecalc)) {
                    tableOptions.statsAutoRecalc = option.def.statsAutoRecalc.toLowerCase();
                }
                else {
                    tableOptions.statsAutoRecalc = option.def.statsAutoRecalc;
                }
            }
            if (utils_1.isDefined(option.def.statsPersistent)) {
                if (utils_1.isString(option.def.statsPersistent)) {
                    tableOptions.statsPersistent = option.def.statsPersistent.toLowerCase();
                }
                else {
                    tableOptions.statsPersistent = option.def.statsPersistent;
                }
            }
            if (utils_1.isDefined(option.def.statsSamplePages)) {
                if (utils_1.isString(option.def.statsSamplePages)) {
                    tableOptions.statsSamplePages = option.def.statsSamplePages.toLowerCase();
                }
                else {
                    tableOptions.statsSamplePages = option.def.statsSamplePages;
                }
            }
            if (utils_1.isDefined(option.def.transactional)) {
                tableOptions.transactional = option.def.transactional;
            }
            if (utils_1.isDefined(option.def.withSystemVersioning)) {
                tableOptions.withSystemVersioning = option.def.withSystemVersioning;
            }
            if (utils_1.isDefined(option.def.tablespaceName)) {
                tableOptions.tablespaceName = option.def.tablespaceName;
            }
            if (utils_1.isDefined(option.def.tablespaceStorage)) {
                tableOptions.tablespaceStorage = option.def.tablespaceStorage.toLowerCase();
            }
            if (utils_1.isDefined(option.def.union)) {
                tableOptions.union = option.def.union;
            }
        });
        return tableOptions;
    }
    /**
     * JSON casting of this object calls this method.
     *
     */
    toJSON() {
        const json = {};
        if (utils_1.isDefined(this.autoincrement)) {
            json.autoincrement = this.autoincrement;
        }
        if (utils_1.isDefined(this.avgRowLength)) {
            json.avgRowLength = this.avgRowLength;
        }
        if (utils_1.isDefined(this.charset)) {
            json.charset = this.charset;
        }
        if (utils_1.isDefined(this.checksum)) {
            json.checksum = this.checksum;
        }
        if (utils_1.isDefined(this.collation)) {
            json.collation = this.collation;
        }
        if (utils_1.isDefined(this.comment)) {
            json.comment = this.comment;
        }
        if (utils_1.isDefined(this.compression)) {
            json.compression = this.compression;
        }
        if (utils_1.isDefined(this.connection)) {
            json.connection = this.connection;
        }
        if (utils_1.isDefined(this.dataDirectory)) {
            json.dataDirectory = this.dataDirectory;
        }
        if (utils_1.isDefined(this.indexDirectory)) {
            json.indexDirectory = this.indexDirectory;
        }
        if (utils_1.isDefined(this.delayKeyWrite)) {
            json.delayKeyWrite = this.delayKeyWrite;
        }
        if (utils_1.isDefined(this.encryption)) {
            json.encryption = this.encryption;
        }
        if (utils_1.isDefined(this.encryptionKeyId)) {
            json.encryptionKeyId = this.encryptionKeyId;
        }
        if (utils_1.isDefined(this.ietfQuotes)) {
            json.ietfQuotes = this.ietfQuotes;
        }
        if (utils_1.isDefined(this.engine)) {
            json.engine = this.engine;
        }
        if (utils_1.isDefined(this.insertMethod)) {
            json.insertMethod = this.insertMethod;
        }
        if (utils_1.isDefined(this.keyBlockSize)) {
            json.keyBlockSize = this.keyBlockSize;
        }
        if (utils_1.isDefined(this.maxRows)) {
            json.maxRows = this.maxRows;
        }
        if (utils_1.isDefined(this.minRows)) {
            json.minRows = this.minRows;
        }
        if (utils_1.isDefined(this.packKeys)) {
            json.packKeys = this.packKeys;
        }
        if (utils_1.isDefined(this.pageChecksum)) {
            json.pageChecksum = this.pageChecksum;
        }
        if (utils_1.isDefined(this.password)) {
            json.password = this.password;
        }
        if (utils_1.isDefined(this.rowFormat)) {
            json.rowFormat = this.rowFormat;
        }
        if (utils_1.isDefined(this.statsAutoRecalc)) {
            json.statsAutoRecalc = this.statsAutoRecalc;
        }
        if (utils_1.isDefined(this.statsPersistent)) {
            json.statsPersistent = this.statsPersistent;
        }
        if (utils_1.isDefined(this.statsSamplePages)) {
            json.statsSamplePages = this.statsSamplePages;
        }
        if (utils_1.isDefined(this.transactional)) {
            json.transactional = this.transactional;
        }
        if (utils_1.isDefined(this.withSystemVersioning)) {
            json.withSystemVersioning = this.withSystemVersioning;
        }
        if (utils_1.isDefined(this.tablespaceName)) {
            json.tablespaceName = this.tablespaceName;
        }
        if (utils_1.isDefined(this.tablespaceStorage)) {
            json.tablespaceStorage = this.tablespaceStorage;
        }
        if (utils_1.isDefined(this.union)) {
            json.union = this.union;
        }
        return json;
    }
    /**
     * Create a deep clone of this model.
     */
    clone() {
        const options = new TableOptions();
        if (utils_1.isDefined(this.autoincrement)) {
            options.autoincrement = this.autoincrement;
        }
        if (utils_1.isDefined(this.avgRowLength)) {
            options.avgRowLength = this.avgRowLength;
        }
        if (utils_1.isDefined(this.charset)) {
            options.charset = this.charset;
        }
        if (utils_1.isDefined(this.checksum)) {
            options.checksum = this.checksum;
        }
        if (utils_1.isDefined(this.collation)) {
            options.collation = this.collation;
        }
        if (utils_1.isDefined(this.comment)) {
            options.comment = this.comment;
        }
        if (utils_1.isDefined(this.compression)) {
            options.compression = this.compression;
        }
        if (utils_1.isDefined(this.connection)) {
            options.connection = this.connection;
        }
        if (utils_1.isDefined(this.dataDirectory)) {
            options.dataDirectory = this.dataDirectory;
        }
        if (utils_1.isDefined(this.indexDirectory)) {
            options.indexDirectory = this.indexDirectory;
        }
        if (utils_1.isDefined(this.delayKeyWrite)) {
            options.delayKeyWrite = this.delayKeyWrite;
        }
        if (utils_1.isDefined(this.encryption)) {
            options.encryption = this.encryption;
        }
        if (utils_1.isDefined(this.encryptionKeyId)) {
            options.encryptionKeyId = this.encryptionKeyId;
        }
        if (utils_1.isDefined(this.ietfQuotes)) {
            options.ietfQuotes = this.ietfQuotes;
        }
        if (utils_1.isDefined(this.engine)) {
            options.engine = this.engine;
        }
        if (utils_1.isDefined(this.insertMethod)) {
            options.insertMethod = this.insertMethod;
        }
        if (utils_1.isDefined(this.keyBlockSize)) {
            options.keyBlockSize = this.keyBlockSize;
        }
        if (utils_1.isDefined(this.maxRows)) {
            options.maxRows = this.maxRows;
        }
        if (utils_1.isDefined(this.minRows)) {
            options.minRows = this.minRows;
        }
        if (utils_1.isDefined(this.packKeys)) {
            options.packKeys = this.packKeys;
        }
        if (utils_1.isDefined(this.pageChecksum)) {
            options.pageChecksum = this.pageChecksum;
        }
        if (utils_1.isDefined(this.password)) {
            options.password = this.password;
        }
        if (utils_1.isDefined(this.rowFormat)) {
            options.rowFormat = this.rowFormat;
        }
        if (utils_1.isDefined(this.statsAutoRecalc)) {
            options.statsAutoRecalc = this.statsAutoRecalc;
        }
        if (utils_1.isDefined(this.statsPersistent)) {
            options.statsPersistent = this.statsPersistent;
        }
        if (utils_1.isDefined(this.statsSamplePages)) {
            options.statsSamplePages = this.statsSamplePages;
        }
        if (utils_1.isDefined(this.transactional)) {
            options.transactional = this.transactional;
        }
        if (utils_1.isDefined(this.withSystemVersioning)) {
            options.withSystemVersioning = this.withSystemVersioning;
        }
        if (utils_1.isDefined(this.tablespaceName)) {
            options.tablespaceName = this.tablespaceName;
        }
        if (utils_1.isDefined(this.tablespaceStorage)) {
            options.tablespaceStorage = this.tablespaceStorage;
        }
        if (utils_1.isDefined(this.union)) {
            options.union = this.union.slice();
        }
        return options;
    }
    /**
     * Merge this option instance with another one.
     * Common properties of this instance are overwritten.
     */
    mergeWith(options) {
        if (utils_1.isDefined(options.autoincrement)) {
            this.autoincrement = options.autoincrement;
        }
        if (utils_1.isDefined(options.avgRowLength)) {
            this.avgRowLength = options.avgRowLength;
        }
        if (utils_1.isDefined(options.charset)) {
            this.charset = options.charset;
        }
        if (utils_1.isDefined(options.checksum)) {
            this.checksum = options.checksum;
        }
        if (utils_1.isDefined(options.collation)) {
            this.collation = options.collation;
        }
        if (utils_1.isDefined(options.comment)) {
            this.comment = options.comment;
        }
        if (utils_1.isDefined(options.compression)) {
            this.compression = options.compression;
        }
        if (utils_1.isDefined(options.connection)) {
            this.connection = options.connection;
        }
        if (utils_1.isDefined(options.dataDirectory)) {
            this.dataDirectory = options.dataDirectory;
        }
        if (utils_1.isDefined(options.indexDirectory)) {
            this.indexDirectory = options.indexDirectory;
        }
        if (utils_1.isDefined(options.delayKeyWrite)) {
            this.delayKeyWrite = options.delayKeyWrite;
        }
        if (utils_1.isDefined(options.encryption)) {
            this.encryption = options.encryption;
        }
        if (utils_1.isDefined(options.encryptionKeyId)) {
            this.encryptionKeyId = options.encryptionKeyId;
        }
        if (utils_1.isDefined(options.ietfQuotes)) {
            this.ietfQuotes = options.ietfQuotes;
        }
        if (utils_1.isDefined(options.engine)) {
            this.engine = options.engine;
        }
        if (utils_1.isDefined(options.insertMethod)) {
            this.insertMethod = options.insertMethod;
        }
        if (utils_1.isDefined(options.keyBlockSize)) {
            this.keyBlockSize = options.keyBlockSize;
        }
        if (utils_1.isDefined(options.maxRows)) {
            this.maxRows = options.maxRows;
        }
        if (utils_1.isDefined(options.minRows)) {
            this.minRows = options.minRows;
        }
        if (utils_1.isDefined(options.packKeys)) {
            this.packKeys = options.packKeys;
        }
        if (utils_1.isDefined(options.pageChecksum)) {
            this.pageChecksum = options.pageChecksum;
        }
        if (utils_1.isDefined(options.password)) {
            this.password = options.password;
        }
        if (utils_1.isDefined(options.rowFormat)) {
            this.rowFormat = options.rowFormat;
        }
        if (utils_1.isDefined(options.statsAutoRecalc)) {
            this.statsAutoRecalc = options.statsAutoRecalc;
        }
        if (utils_1.isDefined(options.statsPersistent)) {
            this.statsPersistent = options.statsPersistent;
        }
        if (utils_1.isDefined(options.statsSamplePages)) {
            this.statsSamplePages = options.statsSamplePages;
        }
        if (utils_1.isDefined(options.transactional)) {
            this.transactional = options.transactional;
        }
        if (utils_1.isDefined(options.withSystemVersioning)) {
            this.withSystemVersioning = options.withSystemVersioning;
        }
        if (utils_1.isDefined(options.tablespaceName)) {
            this.tablespaceName = options.tablespaceName;
        }
        if (utils_1.isDefined(options.tablespaceStorage)) {
            this.tablespaceStorage = options.tablespaceStorage;
        }
        if (utils_1.isDefined(options.union)) {
            this.union = options.union.slice();
        }
    }
}
exports.TableOptions = TableOptions;
